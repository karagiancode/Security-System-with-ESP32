#include <esp_now.h>
#include <WiFi.h>

uint8_t broadcastAddress[] = {0xE8, 0xDB, 0x84, 0x08, 0x30, 0xBC};

typedef struct struct_message {
  int motion;
} struct_message;

struct_message myData;

esp_now_peer_info_t peerInfo;

const int pirSensorPin = 4;
const int ledPin = 2;
bool lastMotionState = false;

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nSend Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void setup() {
  pinMode(pirSensorPin, INPUT);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  Serial.begin(115200);
  WiFi.mode(WIFI_STA);

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW init failed");
    return;
  }

  esp_now_register_send_cb(OnDataSent);

  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop() {
  bool isMotionDetected = digitalRead(pirSensorPin) == HIGH;

  if (isMotionDetected != lastMotionState) {
    myData.motion = isMotionDetected ? 1 : 0;

    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));
    Serial.print("Motion: ");
    Serial.println(myData.motion == 1 ? "ON" : "OFF");

    digitalWrite(ledPin, isMotionDetected ? HIGH : LOW);

    lastMotionState = isMotionDetected;
  }

  delay(500);
}