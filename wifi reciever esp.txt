
#include <esp_now.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

///////////////////////////Wifi setup and MQTT setup//////////////////////////////////
// WiFi Credentials
const char* ssid = "DESKTOP-2NFE7PL 6391";
const char* password = "4/Rj4543";

// MQTT Broker
const char* mqtt_server = "192.168.1.65";
const int mqtt_port = 1883;
const char* mqtt_user = "iot";  
const char* mqtt_password = "iot";  

// Topics
const char* topic_light = "home/sensor/light";
const char* topic_motion = "home/sensor/motion";

WiFiClient espClient;
PubSubClient client(espClient);

////////////////////////////////////OLED//////////////////////////////////////////////
// OLED Display (128x64)
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1  
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
/////////////////////////////////////////////recieving data///////////////////////////
// Structure example to receive data
typedef struct struct_message {

    int motion;
} struct_message;

// Create a struct_message called myData
struct_message myData;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&myData, incomingData, sizeof(myData));
  Serial.print("Bytes received: ");

 
  Serial.print("Int: ");
  Serial.print(myData.motion);
}
/////////////////////////////////data revieved///////////////////////////////

// Sensor Pins
const int lightSensorPin = 15;  // Φωτοαισθητήρας

// State Variables
bool lastLightState = false;



void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
/////////////////////////////////////////mqtt setup////////////////////////////////

  // OLED Setup
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println("OLED initialization failed!");
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);

  // WiFi Connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected");

  // MQTT Setup
  client.setServer(mqtt_server, mqtt_port);
  reconnectMQTT();
  

}

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP32Client", mqtt_user, mqtt_password)) {
      Serial.println(" connected!");
    } else {
      Serial.print(" failed, rc=");
      Serial.print(client.state());
      Serial.println(" retrying...");
      delay(2000);
    }
  }

/////////////////////////////ESP-NOW RECIEVING/////////////////////////////////////
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(esp_now_recv_cb_t(OnDataRecv));
}
 


 
void loop() {
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  // Read Light Sensor
  bool isLightDetected = digitalRead(lightSensorPin) == HIGH;

  if(myData.motion==0){
    client.publish(topic_motion, "OFF");
    Serial.println("State of IR is now OFF");
  }else{
    client.publish(topic_motion, "ON");
    Serial.println("State of IR is now ON");
  }


  // Update OLED if light sensor state changes
  if (isLightDetected != lastLightState) {
    display.clearDisplay();
    display.setCursor(10, 10);
    if (isLightDetected) {
      display.println("Light Detected!");
      client.publish(topic_light, "ON");
      Serial.println("Light is off");
    } else {
      display.println("No Light!");
      client.publish(topic_light, "OFF");
       Serial.println("Light is off");
    }
    display.display();
    lastLightState = isLightDetected;
  }


  //delay(1000);
}










